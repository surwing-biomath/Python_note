# 格式化字符串
# 1，占位符：%s：字符串格式；%d：十进制整数格式；%f：浮点数格式
# 2，f-string：Python3.6中引入的格式化字符串的方式，用{}标明被替换的字符
# 3，str.format()方法：模板字符串.format(逗号分隔的参数)

# （1）使用占位符进行格式化
name='madongmei'
age=18
score=98.5
print('姓名：%s, 年龄：%d, 成绩：%f' % (name,age,score)) # 姓名：madongmei, 年龄：18, 成绩：98.500000
print('姓名：%s, 年龄：%d, 成绩：%.1f' % (name,age,score)) # 姓名：madongmei, 年龄：18, 成绩：98.5 # .1f表示小数点后面一位

# （2）f-string
print(f'姓名：{name}, 年龄：{age}, 成绩：{score}') # 姓名：madongmei, 年龄：18, 成绩：98.5

# （3）使用字符串的format方法
print('姓名：{0}, 年龄：{1}, 成绩：{2}'.format(name,age,score)) # 0,1,2对应format参数的索引位置
print('姓名：{2}, 年龄：{0}, 成绩：{1}'.format(age,score,name)) # 姓名：madongmei, 年龄：18, 成绩：98.5

# 格式化字符串详细格式：
# ：引导符号
# 填充：用于填充单个字符
# 对齐方式：< 左对齐 > 右对齐 ^ 居中对齐
# 宽度：字符串的输出宽度
# ,：数字的千位分隔符
# .精度：浮点数小数部分的精度或者字符串的最大输出长度
# 类型：整数类型：b\d\o\x\X 浮点数类型：e\E\f\%

# format的格式控制
s='helloworld'
print('{0:*<20}'.format(s)) # helloworld********** # 字符串的显示宽度为20，左对齐，空白部分使用*号填充 # 0对应format参数的索引位置
print('{0:*>20}'.format(s)) # **********helloworld # 字符串的显示宽度为20，右对齐，空白部分使用*号填充
print('{0:*^20}'.format(s)) # *****helloworld***** # 字符串的显示宽度为20，居中对齐，空白部分使用*号填充
print(s.center(20,'*')) # *****helloworld*****     # 居中对齐的另一种方式，使用center

# 千位分隔符（只适用于整数和浮点数，不适用于字符串）
print('{0:,}'.format(987654321))      # 987,654,321
print('{0:,}'.format(987654321.7865)) # 987,654,321.7865

# 浮点数小数部分的精度
print('{0:.2f}'.format(3.1415926))   # 3.14
# 字符串类型，表示的是最大的显示长度
print('{0:.5}'.format('helloworld')) # hello

# 整数类型
a=425
print('二进制：{0:b}, 八进制：{0:o}, 十进制：{0:d}, 十六进制：{0:x}, 十六进制：{0:X}'.format(a)) # 二进制：110101001, 八进制：651, 十进制：425, 十六进制：1a9, 十六进制：1A9

# 浮点数类型
b=3.1415926
print('{0:.2f},{0:.2e},{0:.2E},{0:.2%}'.format(b)) # 3.14,3.14e+00,3.14E+00,314.16%

